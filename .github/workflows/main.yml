name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0.6'

      - name: Create .env file
        run: |
          echo "DB_USER=${{ secrets.DB_USER }}" > .env.template
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env.template
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env.template
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env.template
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env.template
          echo "RAILS_ENV=${{ secrets.RAILS_ENV }}" >> .env.template
          echo "SENDGRID_APIKEY=${{ secrets.SENDGRID_APIKEY }}" >> .env.template
          echo "FALAE_IMAGES_PATH=${{ secrets.FALAE_IMAGES_PATH }}" >> .env.template
          echo "SECRET_KEY_BASE=${{ secrets.SECRET_KEY_BASE }}" >> .env.template
          envsubst < .env.template > .env
          
      - name: Display .env content
        run: cat .env
        
      - name: Setup Docker Compose
        run: docker-compose --env-file .env up -d

      - name: Check Docker Containers
        run: |
          sleep 10
          docker-compose ps

      - name: Change to directory and run script
        run: |
          ls  # List the contents of the current directory for debugging purposes
          chmod +x restoreDB.sh
          ./restoreDB.sh dump.sql
          
      - name: Run Tests
        env:
           DATABASE_URL: "mysql2://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}"
           RAILS_ENV: ${{ secrets.RAILS_ENV }}
        run: |
            bundle exec rspec
    
  
